<h2 class="ls-title">Basic RSA Sample with Web PKI</h2>

<div class="row">
	<div id="signForm" class="col col-12 col-lg-6">
		<div class="form-group">
			<label>Choose a certificate</label>
			<select id="certificateSelect" class="form-control ls-select"></select>
		</div>
		<div class="form-group">
			<label for="signData">Text to sign</label>
			<input class="form-control" maxlength="60" id="signData" value=">>>> PLACE HERE THE DATA TO BE SIGNED <<<<" />
		</div>
		<button id="signDataButton" class="btn btn-primary" type="button">Sign Data</button>
		<button id="signHashButton" class="btn btn-info" type="button">Sign Data's Hash</button>
		<button id="refreshButton" type="button" class="btn btn-outline-primary ls-button"><i class="fas fa-retweet"></i> Refresh Certificates</button>
	</div>
	<div class="col-md-6" style="word-wrap: break-word;">
		<div id="signInfoPanel"></div>
	</div>
</div>

@section scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://docs.lacunasoftware.com/pt-br/articles/web-pki/index.html
	*@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.11.0.js")"></script>

	@**
		
	*@
	<script src="https://rawgit.com/emn178/js-sha256/master/build/sha256.min.js"></script>

	<script>

		// Variable that will store an instance of the Lacuna Web PKI object. If a license was set on
		// Web.config, the _Layout.cshtml master view will have placed it on the global variable
		// _webPkiLicense, which we pass to the class constructor.
		var pki = new LacunaWebPKI(_webPkiLicense);

		// --------------------------------------------------------------------------------------------------
		// This method will be called as soon as the page is loaded. It will initialize Web PKI and load
		// the certificates on the page.
		// --------------------------------------------------------------------------------------------------
		function init() {

			// Wire up buttons click.
			$('#refreshButton').click(refresh);
			$('#signDataButton').click(signData);
			$('#signHashButton').click(signHash);

			// Block the UI while we get things ready.
			$.blockUI({ message: 'Initializing ...' });

			// Call the init() method on the LacunaWebPKI object, passing a callback for when the component
			// is ready to be used and another to be called when an error occurrs on any of the subsequent
			// operations. For more information, see:
			// https://docs.lacunasoftware.com/en-us/articles/web-pki/get-started.html#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates,        // As soon as the component is ready we'll load the certificates.
				defaultError: onWebPkiError     // Generic error callback defined below.
			});
		}

		// --------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button.
		// --------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates.
			$.blockUI({ message: 'Refreshing ...' });
			// Invoke the loading of the certificates.
			loadCertificates();
		}

		// --------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user clicks the "Refresh"
		// button. At this point, the UI is already blocked.
		// --------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see:
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates({

				// The ID of the <select> element to be populated with the certificates.
				selectId: 'certificateSelect',

				// Function that will be called to get the text that should be displayed for each option.
				selectOptionFormatter: function (cert) {
					var s = cert.subjectName + ' (issued by ' + cert.issuerName + ')';
					if (new Date() > cert.validityEnd) {
						s = '[EXPIRED] ' + s;
					}
					return s;
				}

			}).success(function () {
				// Once the certificates have been listed, unblock the UI.
				$.unblockUI();
			});
		}

		// ------------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Sign Data" button.
		// ------------------------------------------------------------------------------------------------------
		function signData() {

			// Block the UI.
			$.blockUI({ message: 'Signing ...' });

			// Get the thumbprint of the selected certificate.
			var selectedCertThumbprint = $('#certificateSelect').val();

			// Read data from the field and convert to an base64-encoded string.
			var dataToSign = $('#signData').val();
			var base64String = btoa(dataToSign);

			// Call signData() on the Web PKI component passing the "dataToSign", a digest algorithm to be
			// used and the certificate's thumbprint, selected by the user.
			pki.signData({
				thumbprint: selectedCertThumbprint,
				data: base64String,
				digestAlgorithm: 'SHA-256'
			}).success(function (signature) {

				// Render the signature results.
				$('#signInfoPanel')
					.append($('<h5>').append('Signature Result'))
					.append($('<hr>'))
					.append('<span class="badge badge-success">Signed Successfully</span>').append($('<br>'))
					.append($('<br>'))
					.append($('<span>').append('<b>Signature</b>: ' + signature)).append($('<br>'))
					.append($('<br>'))
					.append($('<button>')
						.prop('type', 'button')
						.addClass('btn btn-primary ls-button')
						.click(function () { location.reload(); })
						.append('Try Again'));

				// Disable form elements.
				disableFormElements();

				// Unblock the UI.
				$.unblockUI();

			});
		}

		// ------------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Sign Hash" button.
		// ------------------------------------------------------------------------------------------------------
		function signHash() {

			// Block the UI.
			$.blockUI({ message: 'Signing ...' });

			// Get the thumbprint of the selected certificate.
			var selectedCertThumbprint = $('#certificateSelect').val();

			// Read data from the field and generate the SHA-256 hash from it. After that, convert to an
			// Base64-encoded string.
			var data = $('#signData').val();
			var hashToSign = sha256.arrayBuffer(data);
			var base64String = btoa(String.fromCharCode.apply(null, new Uint8Array(hashToSign)));

			// Call signHash() on the Web PKI component passing the "hashToSign", the used digest algorithm 
			// and the certificate's thumbprint, selected by the user.
			pki.signHash({
				thumbprint: selectedCertThumbprint,
				hash: base64String,
				digestAlgorithm: 'SHA-256'
			}).success(function (signature) {

				// Render the signature results.
				$('#signInfoPanel')
					.append($('<h5>').append('Signature Result'))
					.append($('<hr>'))
					.append('<span class="badge badge-success">Signed Successfully</span>').append($('<br>'))
					.append($('<br>'))
					.append($('<span>').append('<b>Generated Hash (SHA-256)</b>: ' + base64String)).append($('<br>'))
					.append($('<br>'))
					.append($('<span>').append('<b>Signature</b>: ' + signature)).append($('<br>'))
					.append($('<br>'))
					.append($('<button>')
						.prop('type', 'button')
						.addClass('btn btn-primary ls-button')
						.click(function () { location.reload(); })
						.append('Try Again'));

				// Disable form elements.
				disableFormElements();

				// Unblock the UI.
				$.unblockUI();
			});
		}

		// --------------------------------------------------------------------------------------------------
		// Function to be called after the signature is completed to disable all form elements.
		// --------------------------------------------------------------------------------------------------
		function disableFormElements() {
			$('#signForm').addClass('disabled');
			$('#certificateSelect').prop('disabled', true);
			$('#signData').prop('disabled', true);
			$('#signDataButton').prop('disabled', true);
			$('#signHashButton').prop('disabled', true);
			$('#refreshButton').prop('disabled', true);
		}

		// --------------------------------------------------------------------------------------------------
		// Function called if an error occurs on the Web PKI component.
		// --------------------------------------------------------------------------------------------------
		function onWebPkiError(message, error, origin) {

			// Unblock the UI.
			$.unblockUI();

			// Log the error to the browser console (for debugging purposes).
			if (console) {
				console.log('An error has occurred on the signature browser component: ' + message, error);
			}

			// Show the message to the user. You might want to substitute the alert below with a more
			// user-friendly UI component to show the error.
			alert('An error has occurred on the signature browser component: ' + message);
		}

		// Once the page is ready, we call the init() function on the javascript code
		// (see function init() above)
		$(document).ready(init);

	</script>
}
