<h2 class="ls-title">List certificates available on the user's machine with Select2</h2>

<div class="form-group">
	<label>Choose a certificate</label><br />
	<select id="certificateSelect" class="js-example-basic-single js-states form-control"></select>
</div>
<button id="refreshButton" type="button" class="btn btn-primary ls-button"><i class="fas fa-retweet"></i> Refresh Certificates</button>
<a href="https://select2.org/" target="_blank" class="btn btn-outline-primary ls-button"><i class="fas fa-external-link-alt"></i> More information about Select2</a>

@section scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://docs.lacunasoftware.com/pt-br/articles/web-pki/index.html
	*@
	<script type="text/javascript" src="https://cdn.lacunasoftware.com/libs/web-pki/lacuna-web-pki-2.14.3.min.js"
			  integrity="sha256-P92LF1ePw0qwnmbefDpDiMcr8rmwFkcxVX+utanmlek="
			  crossorigin="anonymous"></script>

	<script>

		// Variable that will store an instance of the Lacuna Web PKI object. If a license was set on
		// Web.config, the _Layout.cshtml master view will have placed it on the global variable
		// _webPkiLicense, which we pass to the class constructor.
		var pki = new LacunaWebPKI(_webPkiLicense);

		// --------------------------------------------------------------------------------------------------
		// This method will be called as soon as the page is loaded. It will initialize Web PKI and load
		// the certificates on the page.
		// --------------------------------------------------------------------------------------------------
		function init() {

			// Wire up "refresh" button.
			$('#refreshButton').click(refresh);

			// Block the UI while we get things ready.
			$.blockUI({ message: 'Initializing ...' });

			// Call the init() method on the LacunaWebPKI object, passing a callback for when the component
			// is ready to be used and another to be called when an error occurrs on any of the subsequent
			// operations. For more information, see:
			// https://docs.lacunasoftware.com/en-us/articles/web-pki/get-started.html#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates,        // As soon as the component is ready we'll load the certificates.
				defaultError: onWebPkiError     // Generic error callback defined below.
			});
		}

		// --------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button.
		// --------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates.
			$.blockUI({ message: 'Refreshing ...' });
			// Invoke the loading of the certificates.
			loadCertificates();
		}

		// --------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user clicks the "Refresh"
		// button. At this point, the UI is already blocked.
		// --------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see:
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates().success(function (storedCerts) {

				// Create an object to be shown on Select2 from each certificate. Its define which
				// certificate are valid or invalid. At last, sort the list of objects by its validity.
				var select2Certs = $.map(storedCerts, function (cert) {

					var obj = {};
					if (cert.validityEnd < new Date()) {
						// In this case, the certificate is expired.
						obj.id = cert.thumbprint;
						obj.disabled = true;
						obj.text = cert.subjectName;
						obj.error = 'Expired ' + cert.validityEnd.toISOString().split('T')[0];
					} else {
						// It is a valid certificate.
						obj.id = cert.thumbprint;
						obj.disabled = false;
						obj.text = cert.subjectName + ' (issued by ' + cert.issuerName + ')';
					}
					return obj;

				}).sort(function (a, b) { return a.disabled - b.disabled; });

				$('.js-example-basic-single').select2({

					// The certificates data to be shown.
					data: select2Certs,

					// Function that will be called to get the text that should be displayed for each
					// option.
					templateResult: function (cert) {
						if (!cert.id) {
							return cert.text;
						}
						var $certificate;
						if (cert.disabled) {
							$certificate = $('<span>' + cert.text + ' <font style="color:red;">' + cert.error + '</font></span>');
						} else {
							$certificate = $('<span><font style="font-weight: bold;">' + cert.text + '</font></span>');
						}
						return $certificate;
					}
				});

				// Once the certificates have been listed, unblock the UI.
				$.unblockUI();
			});
		}

		// --------------------------------------------------------------------------------------------------
		// Function called if an error occurs on the Web PKI component.
		// --------------------------------------------------------------------------------------------------
		function onWebPkiError(message, error, origin) {

			// Unblock the UI.
			$.unblockUI();

			// Log the error to the browser console (for debugging purposes).
			if (console) {
				console.log('An error has occurred on the signature browser component: ' + message, error);
			}

			// Show the message to the user. You might want to substitute the alert below with a more
			// user-friendly UI component to show the error.
			alert('An error has occurred on the signature browser component: ' + message);
		}

		// Once the page is ready, we call the init() function on the javascript code
		// (see function init() above)
		$(document).ready(init);

	</script>
}
