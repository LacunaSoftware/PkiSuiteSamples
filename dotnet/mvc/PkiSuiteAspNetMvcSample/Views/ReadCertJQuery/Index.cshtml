<h2 class="ls-title">Read one of the user's certificates with JQuery</h2>

<div class="row">
	<div class="col col-12 col-lg-6">
		<div class="form-group">
			<label for="certificateSelect">Choose a certificate</label>
			<select id="certificateSelect" class="form-control ls-select"></select>
		</div>
		<button id="refreshButton" type="button" class="btn btn-primary ls-button"><i class="fas fa-retweet"></i> Refresh Certificates</button>
	</div>
	<div class="col col-12 col-lg-6">
		<div id="certInfo"></div>
	</div>
</div>


@section Scripts{

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://docs.lacunasoftware.com/pt-br/articles/web-pki/index.html
	*@
	<script src="@Url.Content("~/Content/js/lacuna-web-pki-2.11.0.js")"></script>
	<script>

		// Global variable stored all certificate objects. This list will be useful when we want to recover
		// the certificate's information using its thumbprint field.
		var certificates = [];

		// Variable that will store an instance of the Lacuna Web PKI object. If a license was set on
		// Web.config, the _Layout.cshtml master view will have placed it on the global variable
		// _webPkiLicense, which we pass to the class constructor.
		var pki = new LacunaWebPKI(_webPkiLicense);

		// --------------------------------------------------------------------------------------------------
		// This method will be called as soon as the page is loaded. It will initialize Web PKI and load
		// the certificates on the page.
		// --------------------------------------------------------------------------------------------------
		function init() {

			// Wire up "refresh" button.
			$('#refreshButton').click(refresh);

			// Register "onchange" event to read the certificate and show info on page every time a
			// certificate is chosen.
			$('#certificateSelect').change(onCertificateChosen);

			// Block the UI while we get things ready.
			$.blockUI({ message: 'Initializing ...' });

			// Call the init() method on the LacunaWebPKI object, passing a callback for when the component
			// is ready to be used and another to be called when an error occurrs on any of the subsequent
			// operations. For more information, see:
			// https://docs.lacunasoftware.com/en-us/articles/web-pki/get-started.html#coding-the-first-lines
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_init
			pki.init({
				ready: loadCertificates,        // As soon as the component is ready we'll load the certificates.
				defaultError: onWebPkiError     // Generic error callback defined below.
			});
		}

		// --------------------------------------------------------------------------------------------------
		// Function called when the user clicks the "Refresh" button.
		// --------------------------------------------------------------------------------------------------
		function refresh() {
			// Block the UI while we load the certificates.
			$.blockUI({ message: 'Refreshing ...' });
			// Remove content from "certificate information" field.
			$('#certInfo').empty();
			// Invoke the loading of the certificates.
			loadCertificates();
		}

		// --------------------------------------------------------------------------------------------------
		// Function that loads the certificates, either on startup or when the user clicks the "Refresh"
		// button. At this point, the UI is already blocked.
		// --------------------------------------------------------------------------------------------------
		function loadCertificates() {

			// Call the listCertificates() method to list the user's certificates. For more information see:
			// http://webpki.lacunasoftware.com/Help/classes/LacunaWebPKI.html#method_listCertificates
			pki.listCertificates({

				// The ID of the <select> element to be populated with the certificates.
				selectId: 'certificateSelect',

				// Function that will be called to get the text that should be displayed for each option.
				selectOptionFormatter: function (cert) {
					var s = cert.subjectName + ' (issued by ' + cert.issuerName + ')';
					if (new Date() > cert.validityEnd) {
						s = '[EXPIRED] ' + s;
					}
					return s;
				}

			}).success(function (certs) {

				// Store certificates objects on a global variable to be used on rendering the chosen
				// certificate's fields.
				certificates = certs;

				// Once the certificates have been listed, unblock the UI.
				$.unblockUI();
			});
		}

		// --------------------------------------------------------------------------------------------------
		// This handler method will be executed every time a certificate is chosen.
		// --------------------------------------------------------------------------------------------------
		function onCertificateChosen() {

			// Get the thumbprint of the select certificate.
			var selectedThumbprint = $('#certificateSelect').val();

			// Find the certificate object referred by its thumbprint. After that, we call the method
			// showCertInfo() to render the certificate on the div#certInfo element using JQuery.
			for (var i = 0; i < certificates.length; i++) {
				if (certificates[i].thumbprint === selectedThumbprint) {
					showCertInfo(certificates[i]);
					break;
				}
			}
		}

		// --------------------------------------------------------------------------------------------------
		// Function called by "onCertificationChosen" method. This method will render the certificate's
		// fields on the div#certInfo element.
		// --------------------------------------------------------------------------------------------------
		function showCertInfo(cert) {

			// Acquire the element's reference.
			var certInfoElement = $('#certInfo');

			// Clean all content inside the element.
			certInfoElement.empty();

			// Render the certificate's fields.
			certInfoElement
				.append($('<h5>').append('Certificate\'s Fields'))
				.append($('<hr>'))
				.append($('<span>').append('<b>Thumbprint</b>: ' + cert.thumbprint)).append($('<br>'))
				.append($('<span>').append('<b>Subject Name</b>: ' + cert.subjectName)).append($('<br>'))
				.append($('<span>').append('<b>Issued Name</b>: ' + cert.issuerName)).append($('<br>'))
				.append($('<span>').append('<b>Validity Start</b>: ' + cert.validityStart)).append($('<br>'))
				.append($('<span>').append('<b>Validity End</b>: ' + cert.validityEnd)).append($('<br>'));

			if (cert.pkiBrazil.certificateType !== "Unknown") {
				// Render the ICP-Brasil fields.
				certInfoElement
					.append($('<span>').append('<b>Certificate Type</b>: ' + cert.pkiBrazil.certificateType)).append($('<br>'))
					.append($('<span>').append('<b>CPF</b>: ' + cert.pkiBrazil.cpf)).append($('<br>'))
					.append($('<span>').append('<b>Date Of Birth</b>: ' + cert.pkiBrazil.dateOfBirth)).append($('<br>'))
					.append($('<span>').append('<b>Responsável</b>: ' + cert.pkiBrazil.responsavel)).append($('<br>'));

				if (cert.pkiBrazil.isPessoaJuridica === true) {
					certInfoElement.append('<b>CNPJ</b>: ' + cert.pkiBrazil.cnpj).append($('<br>'));
				}
			}

			// Render the key usages of the certificates.
			certInfoElement.append($('<span>').append('<b>Key Usage</b>: ')).append($('<br>'));
			var keyUsageList = $('<ul>');
			renderKeyUsage(keyUsageList, cert.keyUsage.crlSign, 'CRL Signature');
			renderKeyUsage(keyUsageList, cert.keyUsage.dataEncipherment, 'Data Encipherment');
			renderKeyUsage(keyUsageList, cert.keyUsage.decipherOnly, 'Decipher Only');
			renderKeyUsage(keyUsageList, cert.keyUsage.digitalSignature, 'Digital Signature');
			renderKeyUsage(keyUsageList, cert.keyUsage.encipherOnly, 'Encipher Only');
			renderKeyUsage(keyUsageList, cert.keyUsage.keyAgreement, 'Key Agreement');
			renderKeyUsage(keyUsageList, cert.keyUsage.keyCertSign, 'Key Certificate Signature');
			renderKeyUsage(keyUsageList, cert.keyUsage.keyEncipherment, 'Key Encipherment');
			renderKeyUsage(keyUsageList, cert.keyUsage.nonRepudiation, 'Non Repudiation');
			certInfoElement.append(keyUsageList);
		}

		// --------------------------------------------------------------------------------------------------
		// Function called if an error occurs on the Web PKI component.
		// --------------------------------------------------------------------------------------------------
		function onWebPkiError(message, error, origin) {

			// Unblock the UI.
			$.unblockUI();

			// Log the error to the browser console (for debugging purposes).
			if (console) {
				console.log('An error has occurred on the signature browser component: ' + message, error);
			}

			// Show the message to the user. You might want to substitute the alert below with a more
			// user-friendly UI component to show the error.
			alert('An error has occurred on the signature browser component: ' + message);
		}

		// --------------------------------------------------------------------------------------------------
		// Useful methods on certificate's rendering.
		// --------------------------------------------------------------------------------------------------
		function renderKeyUsage(list, usage, keyUsageText) {
			if (usage) {
				list.append($('<li>').text(keyUsageText));
			}
		}

		// Once the page is ready, we call the init() function on the javascript code
		// (see function init() above)
		$(document).ready(init);

	</script>

}